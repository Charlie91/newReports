var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';

import { separateEvents, addEvent, removeEvent } from './util/events';

var object = PropTypes.object,
    oneOfType = PropTypes.oneOfType,
    number = PropTypes.number,
    string = PropTypes.string,
    func = PropTypes.func;


export var Map = function (_React$Component) {
  _inherits(Map, _React$Component);

  function Map() {
    var _temp, _this, _ret;

    _classCallCheck(this, Map);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = { instance: null }, _this.mapNode = null, _this.getMapNode = function (ref) {
      return _this.mapNode = ref;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Map.prototype.getChildContext = function getChildContext() {
    return { parent: this.state.instance };
  };

  Map.prototype.mount = function mount() {
    var ymaps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.context.ymaps;

    var _separateEvents = separateEvents(this.props),
        state = _separateEvents.state,
        options = _separateEvents.options,
        events = _separateEvents.events,
        instanceRef = _separateEvents.instanceRef;

    var instance = new ymaps.Map(this.mapNode, state, options);

    Object.keys(events).forEach(function (key) {
      return addEvent(events[key], key, instance);
    });
    this.setState({ instance: instance });

    if (typeof instanceRef === 'function') {
      instanceRef(instance);
    }
  };

  Map.prototype.unmount = function unmount() {
    var instance = this.state.instance;

    var _separateEvents2 = separateEvents(this.props),
        events = _separateEvents2.events,
        instanceRef = _separateEvents2.instanceRef;

    if (instance !== null) {
      Object.keys(events).forEach(function (key) {
        return removeEvent(events[key], key, instance);
      });
      instance.destroy();
    }

    if (typeof instanceRef === 'function') {
      instanceRef(null);
    }
  };

  Map.prototype.update = function update(instance) {
    var prevProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var newProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var _separateEvents3 = separateEvents(prevProps),
        prevOptions = _separateEvents3.options,
        prevState = _separateEvents3.state,
        prevEvents = _separateEvents3.events;

    var _separateEvents4 = separateEvents(newProps),
        options = _separateEvents4.options,
        state = _separateEvents4.state,
        events = _separateEvents4.events;

    // if (prevWidth !== width || prevHeight !== height) {
    //   instance.container.fitToViewport();
    // }

    if (prevState.type !== state.type) {
      instance.setType(state.type);
    }

    if (prevState.behaviors !== state.behaviors) {
      instance.behaviors.disable(prevState.behaviors || []);
      instance.behaviors.enable(state.behaviors || []);
    }

    if (prevState.zoom !== state.zoom) {
      instance.setZoom(state.zoom);
    }

    if (prevState.center !== state.center) {
      instance.setCenter(state.center);
    }

    if (state.bounds && prevState.bounds !== state.bounds) {
      instance.setBounds(state.bounds);
    }

    if (prevOptions !== options) {
      instance.options.set(options);
    }

    this.updateEvents(instance, prevEvents, events);
  };

  Map.prototype.updateEvents = function updateEvents(instance, prevEvents, newEvents) {
    var mergedEvents = _extends({}, prevEvents, newEvents);

    Object.keys(mergedEvents).forEach(function (key) {
      if (prevEvents[key] !== newEvents[key]) {
        removeEvent(prevEvents[key], key, instance);
        addEvent(newEvents[key], key, instance);
      }
    });
  };

  Map.prototype.componentDidMount = function componentDidMount() {
    if (this.context.ymaps) this.mount();
  };

  Map.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {
    if (nextContext.ymaps !== null && this.state.instance === null) {
      this.mount(nextContext.ymaps);
    } else if (this.state.instance !== null) {
      this.update(this.state.instance, this.props, nextProps);
    }
  };

  Map.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (this.state.instance !== null && (prevProps.width !== this.props.width || prevProps.height !== this.props.height)) {
      // fitToViewport on with/height update should happen after
      // component width/height update happened
      this.state.instance.container.fitToViewport();
    }
  };

  Map.prototype.componentWillUnmount = function componentWillUnmount() {
    this.unmount();
  };

  Map.prototype.render = function render() {
    var _props = this.props,
        width = _props.width,
        height = _props.height,
        children = _props.children;
    var instance = this.state.instance;


    return React.createElement(
      'div',
      { style: { width: width, height: height }, ref: this.getMapNode },
      instance && children
    );
  };

  return Map;
}(React.Component);
Map.propTypes = {
  state: object,
  options: object,
  width: oneOfType([number, string]),
  height: oneOfType([number, string]),
  instanceRef: func
};
Map.defaultProps = {
  state: {
    center: [0, 0],
    zoom: 1
  },
  width: 400,
  height: 315,
  instanceRef: Function.prototype
};
Map.contextTypes = {
  ymaps: object
};
Map.childContextTypes = {
  parent: object
};